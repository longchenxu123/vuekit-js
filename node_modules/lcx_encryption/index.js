"use strict";
const comma = '.';
const skm = '@abcdefghigjlmn#opqrstuvwsy%z012^345&6789*zys_wvu-tsr,qp|onml~jgi`hgf!edcba!9876?543210';
const firstArr = [];


// 加密
export function L_necCodeStringVal(decStr) {
    if (!decStr) {
        console.error("必须提供一个要加密的数据！")
        return null;
    }
    let ascllArr = [];
    for(let iKey = 0; iKey < decStr.length; iKey++) {
        let codeVal = decStr.charCodeAt(iKey);
        firstArr.push(codeVal);

        let tranVal = decimaTotal(codeVal) << 10;
        let resrVal = reseveCode(tranVal);

        ascllArr.push(resrVal)
    }

    let AllTianStr = '';
    let arr = [];
    for(let aKey = 0; aKey < ascllArr.length; aKey++) {
        let item = ascllArr[aKey].toString();
        let iremResult = randomNum(item);
        AllTianStr += iremResult;
        arr.push(iremResult)
    }
    return AllTianStr;
}

// 解码
export function L_decCodeStringVal(codeArr) {
    let newArr = segmetStr(codeArr);
    let rotArr = rotateCode(newArr);
    let unitArr = [];
    for(let a = 0; a < rotArr.length; a++) {
        rotArr[a] = rotArr[a].split('').reverse().join('')
    }

    codeArr = rotArr;

    if (Array.isArray(codeArr)) {
        for(let i = 0; i<codeArr.length; i++) {
            let codeStrNum = parseInt(codeArr[i] >> 10, 8);
            let value = String.fromCharCode(codeStrNum);
            unitArr.push(value)
        }

        return unitArr.join('')
    }

}



window.L_necCodeStringVal = L_necCodeStringVal;
window.L_decCodeStringVal = L_decCodeStringVal;
/**--------------------------------------一个简单轻量级的八进制加密--------------------------------------------*/


// 分割 传的解密字符串
function segmetStr(str) {
    let arr = [];
    let strArr = [];
    for(let i = 0; i < str.length; i++) {
        if (str[i] === comma) {
            arr.push(i)
        }
    }

    for(let b = arr.length - 1; b >=0 ; b--) {
        if (b % 2 === 0) {
            arr.splice(b,1)
        }
    }

    let strartIndex = null; // 用于记录上一次的值
    for (let a = 0; a < arr.length; a++) {
        let start, end;
        if (strartIndex === null) { // 说明是第一次
            start = 0;
            end = arr[a]
        } else {
            start = arr[a - 1];
            end = arr[a]
        }
        strartIndex = arr[a];
        let strNew = str.slice(start, end);
        let replStr = strNew.replace(/\./g, '');
        strArr.push(replStr)
    }

    return strArr;
}

// 产生随机的 skm 钥匙
function randomSkm() {
    let len = skm.length;
    let index = Math.floor(Math.random() * len - 1);
    return skm[index] || skm[0]
}

// 将每一个字符包裹 skm 钥匙字符
function randomNum(itemStr) {
    if (typeof itemStr !== 'string' || !itemStr) {
        console.error("请确保传递了参数并且是一个字符串！")
        return null;
    }

    let resultArr = [];

    for (let i = 0; i < itemStr.length; i++) {
        let resultItem = randomSkm() + itemStr[i] + randomSkm();
        resultArr.push(resultItem)
    }

    let strResuVal = resultArr.join('');
    let newStrVal = '';
    for(let j = 0; j < strResuVal.length; j++) {
        const indexLen = strResuVal.length / 2;
        const index = Math.floor(Math.random() * indexLen);

        newStrVal = inserStr(strResuVal, '.', index);
    }

    return newStrVal

}

// 在指定的位置中插入指定的字符
/**
 * originStr  原字符
 * chartStr 插入的字符
 * index 插入的位置
*/
function inserStr(originStr, chartStr, index) {
    if (index < 0) {
        index = 0
    } else if (index > originStr.length) {
        index = originStr.length - 1;
    }

    const str1 = originStr.slice(0,index);
    const str2 = originStr.slice(index);

    const newStr = str1 + chartStr + str2 + comma;

    return newStr;
}

// 十进制 转
function decimaTotal(deNumber) {
    if (typeof deNumber === 'number') {
        return deNumber.toString(8)
    } else {
        return null;
    }
}

// 翻转 参数
function reseveCode(code) {
    if (code !== 'string') {
        code = code.toString()
    }
    return code.split('').reverse().join('')
}


function rotateCode(arr) {
    let arrCode = [];
    for(let i = 0; i< arr.length; i++) {
        let j = arr[i].length;
        let start = Math.floor(j / 3);
        let str = [];
        for(let a = 0; a < j; a++) {
            if (a % 3 === 0) {
                let start = a;
                let end = a + 3;
                let resuleStr = arr[i].slice(start, end)[1];
                str.push((+resuleStr))
            }
        }

        arrCode.push(str.join(''));
    }

    return arrCode;
}